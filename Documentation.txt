О назначении классов:

Spaceship.cs
- отвечает за перемещение;
- хранит в себе планету-цель и планету-источник (к которой груз возвращается);
- хранит методы получение этих планет;

SpaceshipsPort.cs
- "спавнер" кораблей;
- для каждой планеты берет корабль из пула, устанавливает целевую планету, планету-источник и увеличивает число кораблей в счётчике StatsSystem.cs;

CargoLoaderForShips.cs
- СТРОГО рекомендуется устанавливать для планет;
- для работы нужен CargoGenerator;

- принимает корабли и добавляет их в aceptedSpaceShips;
-- приземление (скрывает модель корабля);

- отправляет корабль с грузом:
-- генерирует груз через CargoGenerator;
-- отправляет груз к кораблю;
-- выпускает корабль с планеты;

CargoGenerator.cs
- рекомендуется для CargoLoaderForShips.cs;
- принимает тип груза и ограничение в количестве;
- генерирует груз;

Cargo.cs
- конструкторы для создание груза;
- методы получения цены, количества и типа;

CargoHandler.cs
- СТРОГО рекомендуется для Spaceship.cs;
- метод проверки наличия груза CheckCargo();
- метод получения груза AcceptCargo();
- AcceptNow() и AcceptFinish() для регулирования состояния;
- DeliverCargo() доставляет груз приемщику CargoReceiver.cs;

CargoReceiver.cs
- необходим использовать с ResourcesStorage.cs;
- коллайдер должен быть триггером;
- AcceptCargo() принимает груз с корабля и отправляет на обработку в ResourcesStorage.cs;
- при подлёте планеты корабль доставляет груз и отправляется в пулл, число кораблей в счетчике StatsSystem.cs уменьшается;

CargoTransporter.cs
- СТРОГО рекомендуется CargoHandler.cs;
- при подлёте к целевой планете отправляет запрос на приземление;


Основные действия:

Добавление нового типа ресурса/груза:
- в Resource.cs добавить тип ресурса в |enum Type|;
- в ResourcesStorage.cs в массив |Resource[] resources| добавить начальное число ресурсов в хранилище;
- в инспекторе |ResourcesSystem| в |ResourceInfo| добавить каждому типу названия для интерфейса;


Иконки:
- ресурсы
- статитика
- торговля
- солнце
- значок груза